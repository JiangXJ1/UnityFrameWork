package cs

const CsharpTemplate = `// Generated by code
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Schema
{
	public partial class #CLASS_NAME#:ISchema
	{
		private Dictionary<#KEY_TYPE#, #CLASS_NAME#Define> Data = new Dictionary<#KEY_TYPE#, #CLASS_NAME#Define>();

		public bool Contains(#KEY_TYPE# key)
        {
			return Data.ContainsKey(key);
        }

		public bool TryGet(#KEY_TYPE# key, out #CLASS_NAME#Define schema)
		{
			if(!Data.TryGetValue(key, out schema))
            {
				LOG.DEBUG_WARN($"读不到配置!配置名：#CLASS_NAME# ，KEY: {key}");
				return false;
            }
			return true;
		}

        public #CLASS_NAME#Define Get(#KEY_TYPE# key)
        {
			if(!Data.TryGetValue(key, out var schema))
            {
				LOG.DEBUG_WARN($"读不到配置!配置名：#CLASS_NAME# ，KEY: {key}");
            }
			return schema;
		}

		public Dictionary<#KEY_TYPE#, #CLASS_NAME#Define>.KeyCollection GetKeys()
        {
            return Data.Keys;
        }

		public Dictionary<#KEY_TYPE#, #CLASS_NAME#Define>.ValueCollection GetValues()
        {
            return Data.Values;
        }

        public Dictionary<#KEY_TYPE#, #CLASS_NAME#Define>.Enumerator GetEnumerator()
        {
            return Data.GetEnumerator();
        }
	
		#region Deserialize code
		public void Deserialize(Config.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
				var bound = reader._reader.ReadInt32();
				#CLASS_NAME#Define element = new #CLASS_NAME#Define(new Config.DataReader(reader, reader._reader.BaseStream.Position + bound));
				Data.Add(element.#KEY_NAME#, element);
            } 
		}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
			Data.Clear();
		}
		#endregion
		public void Release()
		{
			
		}
	} 

	[System.Serializable]
	public partial class #CLASS_NAME#Define
	{
		#DATA_DEFINE#
		public #CLASS_NAME#Define(Config.DataReader reader)
		{
            #DESERIALIZE#
    	}
	} 
}
`
