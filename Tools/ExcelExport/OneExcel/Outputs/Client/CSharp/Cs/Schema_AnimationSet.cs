// Generated by code
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Schema
{
	public partial class Schema_AnimationSet:ISchema
	{
		private Dictionary<uint, Schema_AnimationSetDefine> Data = new Dictionary<uint, Schema_AnimationSetDefine>();

		public bool Contains(uint key)
        {
			return Data.ContainsKey(key);
        }

        public Schema_AnimationSetDefine Get(uint key)
        {
			if(!Data.TryGetValue(key, out var schema))
            {
				LOG.ERROR($"读不到配置!配置名：Schema_AnimationSet ，KEY: {key}");
            }
			return schema;
		}

		public Dictionary<uint, Schema_AnimationSetDefine>.KeyCollection GetKeys()
        {
            return Data.Keys;
        }

		public Dictionary<uint, Schema_AnimationSetDefine>.ValueCollection GetValues()
        {
            return Data.Values;
        }

        public Dictionary<uint, Schema_AnimationSetDefine>.Enumerator GetEnumerator()
        {
            return Data.GetEnumerator();
        }
	
		#region Deserialize code
		public void Deserialize(Config.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
				Schema_AnimationSetDefine content = reader.ReadStruct<Schema_AnimationSetDefine>(DataDefineDeserializeHandler);
				Data.Add(content.KEY, content);
            } 
		}


		static Config.DeserializeHandler<Schema_AnimationSetDefine> _DataDefineDeserializeHandler;
		static Config.DeserializeHandler<Schema_AnimationSetDefine> DataDefineDeserializeHandler
		{
			get
			{
				if (_DataDefineDeserializeHandler == null )
				{
					_DataDefineDeserializeHandler = new Config.DeserializeHandler<Schema_AnimationSetDefine>(Deserialize);
				}

				return _DataDefineDeserializeHandler;
			}
		}
		public static void Deserialize( Schema_AnimationSetDefine ins, Config.DataReader reader )
		{
            ins.KEY = reader.ReadUInt32();

			uint count_Animation = reader.ReadUInt32();
			if(count_Animation > 0){
				ins.Animation = new uint [count_Animation];
				for (int i = 0; i < count_Animation; i++)
				{
					ins.Animation[i] = reader.ReadUInt32();
				}
			}else
				ins.Animation = null;

			ins.AnimationPlayMode = reader.ReadUInt32();

			uint count_AnimationWeight = reader.ReadUInt32();
			if(count_AnimationWeight > 0){
				ins.AnimationWeight = new uint [count_AnimationWeight];
				for (int i = 0; i < count_AnimationWeight; i++)
				{
					ins.AnimationWeight[i] = reader.ReadUInt32();
				}
			}else
				ins.AnimationWeight = null;

			ins.AnimLoop = reader.ReadUInt32() == 1;

			
    	}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
			Data.Clear();
		}
		#endregion
		public void Release()
		{
			
		}
	} 

	[System.Serializable]
	public partial class Schema_AnimationSetDefine
	{
		public uint KEY = 0;
		public uint [] Animation;//*
		public uint AnimationPlayMode = 0;
		public uint [] AnimationWeight;//*
		public bool AnimLoop = false;//*
		
	} 
}
