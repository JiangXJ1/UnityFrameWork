// Generated by github.com/davyxu/tabtoy
// Version: 
// DO NOT EDIT!!
using System.Collections.Generic;

namespace table
{
	
	public partial class Sample
	{
		public Dictionary<int, SampleDefine> Data = new Dictionary<int, SampleDefine>();
	
		#region Deserialize code
		public static void Deserialize( Sample ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
				SampleDefine content = reader.ReadStruct<SampleDefine>(SampleDefineDeserializeHandler);
				ins.Data.Add(content.Key, content);
            } 
		}


		static tabtoy.DeserializeHandler<SampleDefine> _SampleDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SampleDefine> SampleDefineDeserializeHandler
		{
			get
			{
				if (_SampleDefineDeserializeHandler == null )
				{
					_SampleDefineDeserializeHandler = new tabtoy.DeserializeHandler<SampleDefine>(Deserialize);
				}

				return _SampleDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SampleDefine ins, tabtoy.DataReader reader )
		{
            ins.Key = reader.ReadInt32();
			ins.K_Float = reader.ReadFloat();
			ins.K_String = reader.ReadString();

            var count = reader.ReadUInt32();
            for (int i = 0; i < count; i++)
            {
				ins.K_IntArray.Add(reader.ReadInt32());
            }

            count = reader.ReadUInt32();
			uint cellCount = 0;
            for (int i = 0; i < count; i++)
            {
				List<int> list = new List<int>();
				cellCount = reader.ReadUInt32();
				for(int j=0;j< cellCount;j++)
                {
					list.Add(reader.ReadInt32());
				}
				ins.K_IntArray2D.Add(list);
			}
    }
		#endregion
		#region Clear Code
		public void Clear( )
		{			
				Data.Clear();
		}
		#endregion
	} 

	[System.Serializable]
	public partial class SampleDefine
	{
		public int Key = 0; 
		public float K_Float = 0; 
		public string  K_String = "";
		public List<int> K_IntArray = new List<int>();
		public List<List<int>> K_IntArray2D = new List<List<int>>();
	} 
}
