package export

import (
	"bytes"
	"text/template"
)

type CsharpNormalTemplateParam struct {
	ClassName   string
	KeyName     string
	KeyType     string
	DataDefine  string
	Deserialize string
}

const csharpTemplate = `// Generated by code
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Schema
{
	public partial class {{.ClassName}}:ISchema
	{
		private Dictionary<{{.KeyType}}, {{.ClassName}}Define> Data = new Dictionary<{{.KeyType}}, {{.ClassName}}Define>();

		public bool Contains({{.KeyType}} key)
        {
			return Data.ContainsKey(key);
        }

		public bool TryGet({{.KeyType}} key, out {{.ClassName}}Define schema)
		{
			if(!Data.TryGetValue(key, out schema))
            {
				LOG.DEBUG_WARN($"读不到配置!配置名：{{.ClassName}} ，KEY: {key}");
				return false;
            }
			return true;
		}

        public {{.ClassName}}Define Get({{.KeyType}} key)
        {
			if(!Data.TryGetValue(key, out var schema))
            {
				LOG.DEBUG_WARN($"读不到配置!配置名：{{.ClassName}} ，KEY: {key}");
            }
			return schema;
		}

		public Dictionary<{{.KeyType}}, {{.ClassName}}Define>.KeyCollection GetKeys()
        {
            return Data.Keys;
        }

		public Dictionary<{{.KeyType}}, {{.ClassName}}Define>.ValueCollection GetValues()
        {
            return Data.Values;
        }

        public Dictionary<{{.KeyType}}, {{.ClassName}}Define>.Enumerator GetEnumerator()
        {
            return Data.GetEnumerator();
        }

		public IEnumerable<KeyValuePair<{{.KeyType}}, {{.ClassName}}Define>> GetEnumerable()
        {
            return Data;
        }
	
		#region Deserialize code
		public void Deserialize(Config.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
				var bound = reader._reader.ReadInt32();
				{{.ClassName}}Define element = new {{.ClassName}}Define(new Config.DataReader(reader, reader._reader.BaseStream.Position + bound));
				Data.Add(element.{{.KeyName}}, element);
            } 
		}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
			Data.Clear();
		}
		#endregion
		public void Release()
		{
			
		}
	} 

	[System.Serializable]
	public partial class {{.ClassName}}Define
	{
		{{.DataDefine}}
		public {{.ClassName}}Define(Config.DataReader reader)
		{
            {{.Deserialize}}
    	}
	} 
}
`

func (c *CsharpNormalTemplateParam) GenerateCsharpTemplate() string {
	var buf bytes.Buffer
	t := template.Must(template.New("deserialize").Parse(csharpTemplate))
	if err := t.Execute(&buf, c); err != nil {
		panic("template execution failed: " + err.Error())
	}
	return buf.String()
}
