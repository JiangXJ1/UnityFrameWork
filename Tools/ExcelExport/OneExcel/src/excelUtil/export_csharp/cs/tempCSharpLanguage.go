package cs

const CsharpLanguageTemplate = `// Generated by code
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Schema
{
	public partial class #CLASS_NAME#:ISchemaLanguage, ISchema
	{
		private #CLASS_NAME#Define _data;

		public #CLASS_NAME#Define Data { get { return _data; } }

		public override string Get(string key)
        {
			if(!Data.language.TryGetValue(key, out var value))
            {
				LOG.DEBUG_WARN("没有找到语言：" + key);
				return string.Empty;
            }
            else
            {
				return value;
            }
		}

		public override  Dictionary<string, string>.KeyCollection GetKes()
        {
			return Data.language.Keys;
		}

		#region Deserialize code
		public void Deserialize(Config.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
				var bound = reader._reader.ReadInt32();
				#CLASS_NAME#Define element = new #CLASS_NAME#Define(new Config.DataReader(reader, reader._reader.BaseStream.Position + bound));
				_data = element;
				break;
            } 
		}

		#endregion
		#region Clear Code
		public void Clear( )
		{			
			_data = null;
		}
		#endregion
		public void Release()
		{
			
		}
	} 

	[System.Serializable]
	public partial class #CLASS_NAME#Define
	{
		#DATA_DEFINE#
		public #CLASS_NAME#Define(Config.DataReader reader)
		{
            int count = reader.ReadInt32();
			for(int i=0;i<count;i++)
			{
                language.Add(reader.ReadString(), reader.ReadString());
            }
    	}
	} 
}
`
